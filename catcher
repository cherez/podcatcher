#!/usr/bin/env python3

from queue import Queue, Empty
import requests
from xml.dom.minidom import parseString
import os, os.path
from urllib.parse import unquote, urlparse
import sys
from threading import Thread
import yaml

#we don't have to be able to parse dates
try:
    import dateutil.parser
    date_parser = True
except:
    date_parser = False

podcast_queue = Queue()

class CatcherThread(Thread):
    def run(self):
        while True:
            try:
                cast = podcast_queue.get(False)
            except Empty:
                #close when we're out of casts
                return
            cast.download()

class Podcast:
    def __init__(self, url, path):
        self.url = url
        self.path = path

    def download(self):
        print("Downloading {}".format(self.url))
        os.makedirs(self.path, exist_ok=True)
        r = requests.get(self.url)
        dom = parseString(r.text)
        enclosures = dom.getElementsByTagName('enclosure')
        files = []
        for index, i in enumerate(reversed(enclosures)):
            attributes = {j: i.attributes[j].value for j in i.attributes.keys()}
            item = i.parentNode
            try:
                attributes['title'] = item.getElementsByTagName('title')[0].firstChild.nodeValue
            except:
               pass #ignore if it lacks a title
            if date_parser:
                try:
                    time = item.getElementsByTagName('pubDate')[0].firstChild.nodeValue
                    attributes['time'] = dateutil.parser.parse(time).timestamp()
                except:
                    pass #ignore if it lacks a time
            attributes['index'] = index+1
            files.append(File(self, attributes))
        for i in files:
            if i.downloaded(): #skip any files we already have
                continue
            i.download()


class File:
    def __init__(self, podcast, attributes):
        self.podcast = podcast
        self.attributes = attributes
        self.url = attributes['url']
        filename = os.path.split(urlparse(self.url).path)[1]
        filename = unquote(filename)
        filename, ext = os.path.splitext(filename)
        try:
            filename = podcast.format.format(filename = filename,
                    title=attributes['title'],
                    index = attributes['index'])
        except:
            pass #don't worry if the podcast lacks a format or we're missing necessary attributes
        #remove any filename characters we probably don't want to throw at a filesystem
        filename = filename.replace('/', '').replace('\\', ''). \
                replace('\r', '').replace('\n', ''). \
                replace('\x00', ''). \
                replace(':', " - ") #you're welcome, Windows.
        self.path = os.path.join(podcast.path, filename + ext)
        self.time = attributes.get('time', None)

    def downloaded(self):
        return os.path.exists(self.path)

    def download(self):
        print("Downloading {} from {}".format(self.path, self.url))
        request = requests.get(self.url)
        open(self.path, 'wb').write(request.content)
        if self.time:
            os.utime(self.path, (self.time, self.time))

if __name__ == '__main__':
    home = os.path.expanduser("~")
    os.chdir(os.path.join(home, "podcasts"))
    try:
        config = yaml.load(open('podcasts.yaml'))
    except:
        sys.stderr.write("Failed to load config file")
        sys.exit(1)
    podcasts = []
    for i in config['podcasts']:
        if 'path' not in i or 'url' not in i:
            sys.stderr.write("Bad podcast defined in podcasts.yaml: {}".format(i))
            continue
        podcast = Podcast(i['url'], i['path'])
        if 'format' in i:
            podcast.format = i['format']
        elif 'format' in config:
            podcast.format = config['format']
        podcasts.append(podcast)

    for i in podcasts:
        podcast_queue.put(i)

    for i in range(config.get('threads', 1)):
        CatcherThread().start()
